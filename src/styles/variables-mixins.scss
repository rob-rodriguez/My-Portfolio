//Break points
$breakpoints: (
  'sm': 640px,
  'md': 768px,
  'lg': 1024px,
  'xl': 1280px,
  '2xl': 1536px
);

//Layout
$wrap_width: 1200px;
$large_wrap_width: 1400px;
$small_wrap_width: 700px;

$serif_font:  'open-sans', sans-serif;
$sans_serif_font: 'open-sans', sans-serif;
$body_font: $sans_serif_font;
$heading_font: 'dunbar-tall', sans-serif;
$display_font: 'dunbar-tall', sans-serif;

//text size
$base-font-size: 18px;
$text-size-xs: 0.69rem; // 12.5px
$text-size-sm: 0.83rem; // 15px
$text-size-md: 1rem; // 18px
$text-size-lg: 1.2rem; // 21.6px
$text-size-xl: 1.44rem; // 25.92px
$text-size-2xl: 1.73rem; // 31.104px
$text-size-3xl: 2.07rem; // 37.325px
$text-size-4xl: 2.49rem; // 44.79px
$text-size-5xl: 2.99rem; // 53px
$text-size-6xl: 3.55rem; // 5

//Color Scheme
$background: #222427;
$text: #fff;
$primary: #EF5353;
$primary-medium: #CF4646;
$primary-dark: #782A2A;
$secondary: #FED45E;

// Messaging
$error: #97321f;
$warning: #bf5f16;
$success: #334f2e;
$info: #eaecec;
$pale_blue: #E0EEF5;
$light_blue: #9cd0e8;
$medium-blue: #0F3F8C;
$dark_medium_blue: #00376b;

// Neutrals
$cool_gray_80: #bdc5c9;
$cool_gray_60: #677983;
$cool_gray_40: #92a1ab;
$cool_gray_20: #eaecec;
$warm_gray_80: #5e514e;
$warm_gray_60: #877b77;
$warm_gray_40: #afa9a6;
$warm_gray_20: #eae6e3;
$taupe:	#cdb99c;

// Social Media
$facebook: #3b5998;
$twitter: #55acee;
$linkedin: #0077b5;
$instagram: #3f729b;
$pinterest: #bd081c;
$googleplus: #dc4e41;
$youtube: #cd201f;

@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	-o-border-radius: $radius;
	border-radius: $radius;
}

@mixin box-shadow($posx, $posy, $blur, $color) {
	-webkit-box-shadow: $posx $posy $blur $color;
	-moz-box-shadow: $posx $posy $blur $color;
	-ms-box-shadow: $posx $posy $blur  $color;
	-o-box-shadow: $posx $posy $blur  $color;
	box-shadow: $posx $posy $blur $color;
}

@mixin transition($prop, $time) {
	-webkit-transition: #{$prop} #{$time};
	-moz-box-shadow: #{$prop} #{$time};
	-ms-box-shadow: #{$prop} #{$time};
	-o-transition: #{$prop} #{$time};
	transition: #{$prop} #{$time};
}

@mixin horizontal-gradient($color1, $color2) {
	background: $color1;
	background: -moz-linear-gradient(left,  $color1 0%, $color2 100%);
	background: -webkit-linear-gradient(left,  $color1 0%,$color2 100%);
	background: linear-gradient(to right,  $color1 0%,$color2 100%);
}

@mixin vertical-gradient($color1, $color2) {
	background: $color1;
	background: -moz-linear-gradient(top,  $color1 0%, $color2 100%);
	background: -webkit-linear-gradient(top,  $color1 0%,$color2 100%);
	background: linear-gradient(to bottom,  $color1 0%,$color2 100%);
}

@mixin vendor-prefix($name, $value) {
  @each $vendor in ('-webkit-', '-moz-', '-ms-', '-o-', '') {
    #{$vendor}#{$name}: #{$value};
  }
}

@mixin breakpoint($breakpoint) {
  // Retrieves the value from the key
  $value: map-get($breakpoints, $breakpoint);

  // If the key exists in the map
  @if $value != null {
    // Prints a media query based on the value
    @media (min-width: $value) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin darkmode() {

	// Prints a media query based on the value
	html[data-theme='dark'] & {
		@content;
	}
}

@mixin letter-spacing($spacing) {
  letter-spacing: calc($spacing / 1000) * 1em;
}